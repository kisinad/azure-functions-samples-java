# This workflow will build a Java project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-java
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Java project to Azure Function App

on:
    push:
        branches: [ "main" ]
    workflow_dispatch:

permissions:
    id-token: write
    contents: read


env:
    AZURE_FUNCTIONAPP_NAME: 'hello-function-250516234946'   # set this to your function app name on Azure
    POM_XML_DIRECTORY: '.'                    # set this to the directory which contains pom.xml file
    DISTRIBUTION: 'zulu'                      # set this to the java version to use (e.g. 'zulu', 'temurin', 'microsoft')
    JAVA_VERSION: '21'                         # set this to the java version to use (e.g. '8', '11', '17')

jobs:
    job1:
        runs-on: ubuntu-latest
        environment: dev
        outputs:
            AZURE_CREDENTIALS: ${{ steps.gen_output.outputs.AZURE_CREDENTIALS }}
            SECRET: ${{ steps.gen_output.outputs.SECRET }}
        strategy:
            matrix:
                version: [ AZURE_CREDENTIALS, SECRET]
        steps:
            -   name: Generate output
                id: gen_output
                run: |
                    secret_name="${{ matrix.version }}"
                    secret_value1="${{ secrets[matrix.version] }}"
                    # secret_value="${!secret_value1}"
                    # secret=$(eval echo "\$$secret_value")

                    # mask the value
                    echo "::add-mask::$secret_value"

                    echo "${secret_name}=$secret_value" >> "$GITHUB_OUTPUT"

    build-and-deploy:
        runs-on: ubuntu-latest # For Linux, use ubuntu-latest
        needs: [job1]
        environment: dev
        steps:
            -  run: |
                MY_SECRET='${{ toJSON(needs.job1.outputs) }}'
                echo "::remove-mask::$MY_SECRET"
                echo '${{ toJSON(needs.job1.outputs) }}'
            -   name: 'Checkout GitHub Action'
                uses: actions/checkout@v4

            # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
            # - name: 'Login via Azure CLI'
            #   uses: azure/login@v1
            #   with:
            #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

#            -   name: Setup Java Sdk ${{ env.JAVA_VERSION }}
#                uses: actions/setup-java@v4
#                with:
#                    distribution: ${{ env.DISTRIBUTION }}
#                    java-version: ${{ env.JAVA_VERSION }}
#
#            -   name: 'Restore Project Dependencies Using Mvn'
#                shell: pwsh # For Linux, use bash
#                run: |
#                    pushd './${{ env.POM_XML_DIRECTORY }}'
#                    mvn clean package
#                    popd

#            -   name: 'Run Azure Functions Action'
#                uses: Azure/functions-action@v1
#                id: fa
#                with:
#                    app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
#                    package: '${{ env.POM_XML_DIRECTORY }}' # if there are multiple function apps in same project, then this path will be like './${{ env.POM_XML_DIRECTORY }}/target/azure-functions/${{ env.POM_FUNCTIONAPP_NAME }'
#                    publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
#                    respect-pom-xml: true

            -   name: Azure login
                uses: azure/login@v2
                with:
                    creds: ${{ secrets.AZURE_CREDENTIALS }}

#            -   name: Init secrets from KV as envs
#                uses: actions/setup-keyvault-secrets
#                with:
#                    kv-subscription-name: ${{ secrets.CI_KEY_VAULT_SUBSCRIPTION }}
#                    kv-name: ${{ secrets.CI_KEY_VAULT_NAME }}

            -   name: Add secret to GITHUB_ENV
                run: echo "MY_SECRET=${{ secrets.SECRET }}" >> $GITHUB_ENV
#                run: |
#                    printf "MY_SECRET=%s\n" "${{ secrets.CI_KEY_VAULT_NAME }}" >> "$GITHUB_ENV"

            -  name: echo
               run: |
                   echo "Using the secret (still masked): $MY_SECRET"
                   echo "======="
                   echo ${{ vars.MY_SECRET }}
                   echo "======="
                   echo ${{ env.MY_SECRET }}


            -   name: Azure CLI script
                id: step_one
                uses: azure/CLI@v1
                with:
                    inlineScript: |
                        echo secret=$(az keyvault secret show --vault-name MyVaultName --name MySecret --query value --out tsv) >> $GITHUB_ENV
#            -   name: Use the value
#                id: step_two
#                run: |
#                    echo "${{ env.secret }}"
#
#                    key_vault_settings_array=("secrets.SECRET_ONE" "secrets.SECRET_TWO")
#
#                    for i in "${!key_vault_settings_array[@]}"; do
#                        echo "+++for loop+++++"
#                        if [[ "${key_vault_settings_array[$i]}" == secrets.* ]]; then
#                            echo "+++if statement+++++"
#                            echo " = ${key_vault_settings_array[$i]#secrets.}"
#                            key="${key_vault_settings_array[$i]}"
#
#                            value="${{ secrets[key] }}"
#                            echo "===-=---=- $value"
#                            value="${!key}"
#                            key_vault_settings_array[$i]="$value"
#                            echo "$key=$value" >> "$GITHUB_ENV"
#                        fi
#                    done


            -   uses: azure/appservice-settings@v1
                with:
                    app-name: '${{ env.AZURE_FUNCTIONAPP_NAME }}'
                    mask-inputs: false
                    app-settings-json: '[
                                              { "name": "alwaysOnOff",                      "value": "anew" },
                                              { "name": "webSocketsEnabledTrue",            "value": "new" },
                                              { "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",   "value": "new" },
                                              { "name": "POST_BUILD_COMMAND",               "value": "new" },
                                              { "name": "WEBSITE_NODE_DEFAULT_VERSION",     "value": "new" },
                                              { "name": "FUNCTIONS_EXTENSION_VERSION",      "value": "new" },
                                              { "name": "AzureWebJobsStorage",              "value": "new" },
                                              { "name": "WEBSITE_RUN_FROM_PACKAGE",         "value": "new" },
                                              { "name": "SCM_COMMAND_IDLE_TIMEOUT",         "value": "new" },
                                              { "name": "SCM_VALIDATE_PACKAGE",             "value": "new" },
                                              { "name": "ARRAffinityEnabled",               "value": "new" },
                                              { "name": "HTTP2Enabled",                     "value": "new" },
                                              { "name": "LOG_LEVEL",                        "value": "new" },
                                              { "name": "MAX_CONNECTIONS",                  "value": "new" },
                                              { "name": "REQUEST_TIMEOUT",                  "value": "new" },
                                              { "name": "FILE_UPLOAD_LIMIT",                "value": "new" },
                                              { "name": "IDLE_TIMEOUT_IN_MINUTES",          "value": "new" },
                                              { "name": "DEPLOYMENT_TOOL",                  "value": "new" },
                                              { "name": "ENABLE_DIAGNOSTICS",               "value": "new" },
                                              { "name": "APPLICATION_INSIGHTS_KEY",         "value": "new" },
                                              { "name": "ERROR_STACK_TRACE",                "value": "new" },
                                              { "name": "HEALTH_CHECK_PATH",                "value": "new" },
                                              { "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS","value": "new" },
                                              { "name": "WEBSITE_ENABLE_APP_SERVICE_STORAGE","value": "new" }
                                        ]'
                id: settings
            -   run: echo "The webapp-url is ${{ steps.settings.outputs.webapp-url }}"


